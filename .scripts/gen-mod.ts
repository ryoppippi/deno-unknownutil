import {
  fromFileUrl,
  globToRegExp,
  join,
  relative,
  toFileUrl,
} from "@std/path";
import { map } from "@core/iterutil/map";
import { flatMap } from "@core/iterutil/async/flat-map";
import { doc } from "@deno/doc";

const excludes = [
  "mod.ts",
  "*_test.ts",
  "*_bench.ts",
  "_*.ts",
];

async function* iterModules(path: string): AsyncIterable<string> {
  const patterns = excludes.map((p) => globToRegExp(p));
  for await (const entry of Deno.readDir(path)) {
    if (!entry.isFile || !entry.name.endsWith(".ts")) continue;
    if (patterns.some((p) => p.test(entry.name))) continue;
    yield join(path, entry.name);
  }
}

async function generateExportsTs(
  namespace: string,
): Promise<void> {
  const path = fromFileUrl(import.meta.resolve(`../${namespace}/`));
  const exports = (await Array.fromAsync(
    flatMap(iterModules(path), (x) => doc(toFileUrl(x).href)),
  ))
    .filter((x) => !!x.jsDoc?.doc)
    .filter((x) => x.kind === "function")
    .filter((x) => x.declarationKind === "export")
    .filter((x) => x.name.startsWith(namespace))
    .map((x) => ({
      path: relative(path, fromFileUrl(x.location.filename)),
      name: x.name,
      doc: x.jsDoc!.doc!,
    }))
    .toSorted((a, b) => a.name.localeCompare(b.name));
  const lines = [
    "// NOTE: This file is generated by gen-mod.ts",
    ...exports.map((x) => {
      return `export { ${x.name} as ${
        x.name.replace(namespace, "")
      } } from "./${x.path}";`;
    }),
  ];
  await Deno.writeTextFile(
    join(path, `${namespace}.ts`),
    lines.join("\n") + "\n",
  );
}

async function generateModTs(
  namespace: string,
): Promise<void> {
  const path = fromFileUrl(import.meta.resolve(`../${namespace}/`));
  const exports = (await Array.fromAsync(
    flatMap(iterModules(path), (x) => doc(toFileUrl(x).href)),
  ))
    .filter((x) => !!x.jsDoc?.doc)
    .filter((x) => x.kind === "function")
    .filter((x) => x.declarationKind === "export")
    .filter((x) => x.name.startsWith(namespace))
    .map((x) => ({
      path: relative(path, fromFileUrl(x.location.filename)),
      name: x.name,
      doc: x.jsDoc!.doc!,
    }))
    .toSorted((a, b) => a.name.localeCompare(b.name));
  const lines = [
    "// NOTE: This file is generated by gen-mod.ts",
    ...map((new Set(exports.map((x) => x.path))).values(), (x) => {
      return `export * from "./${x}";`;
    }),
    `export * as ${namespace} from "./${namespace}.ts";`,
  ];
  await Deno.writeTextFile(join(path, "mod.ts"), lines.join("\n") + "\n");
}

async function main(): Promise<void> {
  await generateModTs("is");
  await generateModTs("as");
  await generateExportsTs("is");
  await generateExportsTs("as");
}

if (import.meta.main) {
  main().catch((err) => {
    console.error(err);
    Deno.exit(1);
  });
}
